
-------------------Couleur-----------------------

/* public String choixCouleur(int couleur) {
        if (couleur == 1) {
            return Color.JAUNE;
        } else if (couleur == 2) {
            return Color.ROUGE;
        } else if (couleur == 3) {
            return Color.VERT;
        } else if (couleur == 4) {
            return Color.BLEU;
        } else if (couleur == 5) {
            return Color.VIOLET;
        
    }
        return "Veuillez choisir une couleur";
    }




--------------------MENU AFFICHAGE-----------------------




/* 
         // choisir  ton pseudo
        System.out.println("Quel est votre nom ?"); // on demande à l'utilisateur de rentrer son nom
        String nom = scann.nextLine(); // on récupère le nom entré par l'utilisateur

       
         // choisir  ta couleur
        System.out.println("Quel symbol souhaitez vous ?"); // on demande à l'utilisateur de rentrer son symbole
        String symbols = scann.nextLine(); // on récupère le symbole entré par l'utilisateur

       
         // choisir  ta couleur
       System.out.println("Quel couleur veux-tu ?"); // on demande à l'utilisateur de rentrer sa couleur
       System.out.println("Voici la liste des couleurs disponibles :"); 
       
        System.out.println( Color.JAUNE + "Jaune "+ Color.BLEU + "    Bleu"+ Color.VIOLET + "    Violet"+ Color.ROUGE + "    Rouge"+ Color.VERT + "    Vert "+ Color.RESET);
       
        System.out.println(" ");
        System.out.println("?"); // on demande à l'utilisateur de rentrer sa couleur
        String couleur = scann.nextLine(); // on récupère la couleur entrée par l'utilisateur

      
        Joueur joueur = new Joueur(nom, symbols, couleur);// on crée un joueur avec les données entrées par l'utilisateur 

        System.out.println(" ta custo est fini ! tu ressembleras à ca :"); // on affiche les caractéristiques du joueur

        System.out.println("Nom : " + joueur.getNom()); // on affiche le nom du joueur
        System.out.println("Symbole : " + joueur.getSymb()); // on affiche le symbole du joueur
        System.out.println("Couleur : " + joueur.getCouleur()); // on affiche la couleur du joueur

        State_Game.setGameState(State_Game.PLAYING);
        return this;
 
    }*/


     /*
     * public Joueur(String nom, String symbols, String couleur) { // on crée une
     * méthode constructeur qui va nous permettre de créer un joueur
     * this.nom = nom; // on initialise la variable nom
     * this.symbol = symbols; // on initialise la variable symbols
     * this.couleur = couleur;// on initialise la variable couleur
     * }
     */








     --------------------JOUEUR-------------------
     package model;

import model.Color;

import java.util.Scanner;

public class Joueur {// on commence par créer une classe joueur

    boolean symbcolor = false;

    // on declare les variables de la classe joueur
    private String nom; // une variable nom de type String qui va nous permettre de stocker le nom d //
                        // joueur
    private String symbol; // le meme principe pour la variable symbols qui va nous permettre de stocker l
                           // // symbole du joueur
    private String couleur; // et la variable couleur qui va nous permettre de stocker la couleur du joueur

    // ON CRÉER LES METHODES DE LA CLASSE JOUEUR
    public String getNom() { // et pour la variable nom

        return nom;
    }

    public String getSymb() { // on crée une méthode getSymb qui va nous permettre de récupérer la valeur de
                              // la variable symbols

        return symbol;
    }

    public String getCouleur() { // on fait la même pour la variable couleur

        return couleur;
    }

   

    public static Joueur creerJoueur() { // on crée une méthode customisationJoueur qui va nous permettre de
                                         // personnaliser le joueur

        // boolean isOk = false; // on crée une variable isOk de type boolean qui va
        // nous permettre de savoir si l'utilisateur a bien rentré les données demandées
        // Scanner scann = new Scanner(System.in); // on crée un scanner qui va nous
        // permettre de récupérer les données entrées par l'utilisateur
        // personnalisation des couleurs

        // isOk = false;
        // while(!isOk){
        //Joueur joueur = new Joueur();
        do while (true) { //
            try (Scanner symbol = new Scanner(System.in)) {
                System.out.println("\nQuel symbole souhaitez vous utiliser ?\n ["
                        + joueur.symbcolor + "X" + Color.RESET + joueur.symbcolor + "O" + Color.RESET + "]");
                String symbJoueur = symbol.nextLine();// on récupère la valeur entrée par l'utilisateur
                if (symbJoueur.equals("X") || symbJoueur.equals("O")) { // si la valeur entrée par l'utilisateur est égale à
                                                                        // X ou O
                    joueur.symbol = symbJoueur; // alors on stocke la valeur dans la variable symbol
                    joueur.symbcolor = true;
                } else {
                    System.out.println("Veuillez entrer un symbole valide");
                }
            }
            break;
        }

        // on crée une variable isOk de type boolean qui va nous permettre de savoir si
        // l'utilisateur a bien rentré les données demandées
        while (true) { // tant que la couleur n'est pas isOk
            Scanner Couleur = new Scanner(System.in);
                System.out.println(
                        "\nQuelle couleur souhaitez vous utiliser ?\nVous pouvez choisir parmis les couleurs suivantes : ["
                                + Color.BLEU + "Bleu" + Color.RESET + ", " + Color.JAUNE + "Jaune" + Color.RESET + ", "
                                + Color.VIOLET + "Violet" + Color.BLEU + " et " + Color.ROUGE + "Rouge" + Color.RESET
                                + "]");


                // changement de la couleur de l'objet celon la reponse donné
                if (colorJoueur.toLowerCase().equals("bleu")) {
                    joueur.couleur = Color.BLEU;
                }
                if (colorJoueur.toLowerCase().equals("jaune")) {
                    joueur.couleur = Color.JAUNE;
                }
                if (colorJoueur.toLowerCase().equals("violet")) {
                    joueur.couleur = Color.VIOLET;
                }
                if (colorJoueur.toLowerCase().equals("rouge")) {
                    joueur.couleur = Color.ROUGE;

                }

                if (!(colorJoueur.toLowerCase().equals("rouge") || colorJoueur.toLowerCase().equals("violet")
                        || colorJoueur.toLowerCase().equals("jaune") || colorJoueur.toLowerCase().equals("bleu"))) {
                    // si la reponse pour la couleur est differente des choix donné alors renvoie
                    // une erreur
                    System.out.println(
                            Color.ROUGE + "\nCouleur non reconnues! Veuillez réessayer !" + Color.RESET);// message
                                                                                                         // d'erreur

                } else {
                    joueur.symbcolor = true;// si la couleur est isOk alors on passe a la variable suivante
                }
            }
            retour vers le futur

        }
        do{
            

        }while(true);
    }
















     public static void couleur() {
        Scanner input = new Scanner(System.in);
        System.out.println("\nQuelle couleur souhaitez vous utiliser ?\n "+Color.JAUNE +"JAUNE" +Color.VIOLET + "VIOLET"  +Color.BLEU+ "BLEU"+ Color.ROUGE+ "ROUGE" + Color.RESET );
       
        switch (choix) {
        case "BLEU":
            choix = Color.BLEU;
            break;
        case "ROUGE":
            choix = Color.ROUGE;
            break;
        case "JAUNE":
            choix = Color.JAUNE;
            break;
        case "VIOLET":
            choix = Color.VIOLET;
            break;
          
        default:
            System.out.println("Entrez une couleur valide");
            break;
        } String choix = input.nextLine();
        Joueur.setCouleur(choix);``


















---------------------grille-----------------------







package model;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

import model.Pion;

public class Grille {
    private static final int ligne = 6;
    private static final int colonne = 7;
    private Random rand = new Random();
    private ArrayList<ArrayList<String>> grille;

    /**
     * permet d'afficher la grille de jeu
     */
    public void afficherGrille() {
        for (int i = ligne - 1; i >= 0; i--) {
            for (int j = 0; j < colonne; j++) {
                System.out.print("." + grille.get(j).get(i));
            }
            System.out.println(" ");
        }
        for (int i = 0; i < colonne; i++) {
            System.out.print(" ");
        }
        System.out.println();
    }

    /**
     * fonction qui crée une grille
     */
    public Grille() {
        grille = new ArrayList<ArrayList<String>>();
        for (int i = 0; i < colonne; i++) {
            ArrayList<String> colonne = new ArrayList<String>();
            for (int j = 0; j < ligne; j++) {
                colonne.add(".");
            }
            grille.add(colonne);
        }
    }
    
    private static Scanner _scan = new Scanner(System.in);
    Pion pion =  new Pion();
    int column = _scan.nextInt();
    
    /**
     * vérifie si la case est vide
     * @return
     */
    public boolean estVide() {
        return this.pion == null;
    }

    /*public void ajouterPion(int column) {
        if (column >= 0 && column < colonne && !isColonnePleine(column)) {
            for (int i = ligne - 1; i >= 0; i--) {
                if (grille.get(i).get(column).estVide()) {
                    grille.get(i).get(column).Pion.setPion(pion);
                    break;
                }
            }
        } else {
            System.out.println("Mauvaise colonne, réessayez");
        }
    }*/
    /**
     * permet d'ajouter un pion dans la grille
     * @param symbole
     * @param column
     */
    
    
    
    
    
    
    
    
    
    /* 
     public void ajouterPion(String symbole, int column) {
        if (column >= 0 && column <= colonne - 1 && !isColonnePleine(column)) {
            for (int i = ligne - 1; i >= 0; i--) {
                if (grille.get(i).get(column).equals(".")) {
                    grille.get(i).set(column, symbole);
                    break;
                }
            }
        } else {
            System.out.println("Vous ne pouvez pas sélectionner cette colonne !");
        }
    }






    */
    
    
    /**
     * vérifie si une colonne de la grille est pleine 
     * @param column
     * @return
     */
    public boolean isColonnePleine(int column) {
        if (!grille.get(0).get(column).equals(".")) {
            return true;
        }
        return false;
    }
    /**
     * vérifie si la grille est pleine
     * @return
     */
    public boolean grillePleine() {
        for (int i = 0; i < grille.size(); i++) {
            for (int j = 0; j < grille.get(i).size(); j++) {
                if (grille.get(i).get(j).equals(".")) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * création de l'IA niveau 1
     * @return
     */
    public int IA_level_1(){
        int column = rand.nextInt(6 - 0) + 0;
        while(isColonnePleine(column)){
            column = rand.nextInt(6 - 0) + 0;
        }
        return column;
    }

    public static void ajouterPion() {



        ArrayList<ArrayList<String>> currentGrid = grille.getGrid();
        if (Player.getCurrentPlayer() == "1") {
            for (int row = Power4Grid.ROWS - 1; row >= 0; row--) {
                if (currentGrid.get(row).get(col) == "  ") {
                    currentGrid.get(row).set(col, Menu.couleur1);
                    grid.setGrid(currentGrid);
                    break;
                }


    }
        if (column >= 0 && column <= colonne - 1 && !isColonnePleine(column)) {
            for (int i = ligne - 1; i >= 0; i--) {
                if (grille.get(i).get(column).equals(".")) {
                    grille.get(i).set(column, symbole);
                    break;
                }
            }
        } else {
            System.out.println("Vous ne pouvez pas sélectionner cette colonne !");
        }
        
    }
}


    


